# automatically generated by the FlatBuffers compiler, do not modify

# namespace: tflite

from third_party.python import flatbuffers
from third_party.python.flatbuffers.compat import import_numpy
np = import_numpy()

class Conv3DOptions(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Conv3DOptions()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsConv3DOptions(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Conv3DOptionsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x53\x49\x4D\x32", size_prefixed=size_prefixed)

    # Conv3DOptions
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Conv3DOptions
    def Padding(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Conv3DOptions
    def StrideD(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Conv3DOptions
    def StrideW(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Conv3DOptions
    def StrideH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Conv3DOptions
    def FusedActivationFunction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Conv3DOptions
    def DilationDFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 1

    # Conv3DOptions
    def DilationWFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 1

    # Conv3DOptions
    def DilationHFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 1

    # Conv3DOptions
    def PaddingInside(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Conv3DOptions
    def PaddingOutside(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Conv3DOptions
    def PaddingLeft(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Conv3DOptions
    def PaddingRight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Conv3DOptions
    def PaddingTop(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Conv3DOptions
    def PaddingBottom(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def Conv3DOptionsStart(builder): builder.StartObject(14)
def Start(builder):
    return Conv3DOptionsStart(builder)
def Conv3DOptionsAddPadding(builder, padding): builder.PrependInt8Slot(0, padding, 0)
def AddPadding(builder, padding):
    return Conv3DOptionsAddPadding(builder, padding)
def Conv3DOptionsAddStrideD(builder, strideD): builder.PrependInt32Slot(1, strideD, 0)
def AddStrideD(builder, strideD):
    return Conv3DOptionsAddStrideD(builder, strideD)
def Conv3DOptionsAddStrideW(builder, strideW): builder.PrependInt32Slot(2, strideW, 0)
def AddStrideW(builder, strideW):
    return Conv3DOptionsAddStrideW(builder, strideW)
def Conv3DOptionsAddStrideH(builder, strideH): builder.PrependInt32Slot(3, strideH, 0)
def AddStrideH(builder, strideH):
    return Conv3DOptionsAddStrideH(builder, strideH)
def Conv3DOptionsAddFusedActivationFunction(builder, fusedActivationFunction): builder.PrependInt8Slot(4, fusedActivationFunction, 0)
def AddFusedActivationFunction(builder, fusedActivationFunction):
    return Conv3DOptionsAddFusedActivationFunction(builder, fusedActivationFunction)
def Conv3DOptionsAddDilationDFactor(builder, dilationDFactor): builder.PrependInt32Slot(5, dilationDFactor, 1)
def AddDilationDFactor(builder, dilationDFactor):
    return Conv3DOptionsAddDilationDFactor(builder, dilationDFactor)
def Conv3DOptionsAddDilationWFactor(builder, dilationWFactor): builder.PrependInt32Slot(6, dilationWFactor, 1)
def AddDilationWFactor(builder, dilationWFactor):
    return Conv3DOptionsAddDilationWFactor(builder, dilationWFactor)
def Conv3DOptionsAddDilationHFactor(builder, dilationHFactor): builder.PrependInt32Slot(7, dilationHFactor, 1)
def AddDilationHFactor(builder, dilationHFactor):
    return Conv3DOptionsAddDilationHFactor(builder, dilationHFactor)
def Conv3DOptionsAddPaddingInside(builder, paddingInside): builder.PrependInt32Slot(8, paddingInside, 0)
def AddPaddingInside(builder, paddingInside):
    return Conv3DOptionsAddPaddingInside(builder, paddingInside)
def Conv3DOptionsAddPaddingOutside(builder, paddingOutside): builder.PrependInt32Slot(9, paddingOutside, 0)
def AddPaddingOutside(builder, paddingOutside):
    return Conv3DOptionsAddPaddingOutside(builder, paddingOutside)
def Conv3DOptionsAddPaddingLeft(builder, paddingLeft): builder.PrependInt32Slot(10, paddingLeft, 0)
def AddPaddingLeft(builder, paddingLeft):
    return Conv3DOptionsAddPaddingLeft(builder, paddingLeft)
def Conv3DOptionsAddPaddingRight(builder, paddingRight): builder.PrependInt32Slot(11, paddingRight, 0)
def AddPaddingRight(builder, paddingRight):
    return Conv3DOptionsAddPaddingRight(builder, paddingRight)
def Conv3DOptionsAddPaddingTop(builder, paddingTop): builder.PrependInt32Slot(12, paddingTop, 0)
def AddPaddingTop(builder, paddingTop):
    return Conv3DOptionsAddPaddingTop(builder, paddingTop)
def Conv3DOptionsAddPaddingBottom(builder, paddingBottom): builder.PrependInt32Slot(13, paddingBottom, 0)
def AddPaddingBottom(builder, paddingBottom):
    return Conv3DOptionsAddPaddingBottom(builder, paddingBottom)
def Conv3DOptionsEnd(builder): return builder.EndObject()
def End(builder):
    return Conv3DOptionsEnd(builder)